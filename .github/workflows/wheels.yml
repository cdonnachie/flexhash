name: Build and Test

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      build_target:
        description: "Build target"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - wheels-only
          - test-only
          - sdist-only
      python_versions:
        description: "Python versions to test"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - latest-only
          - lts-only
          - minimal
      skip_tests:
        description: "Skip running tests"
        required: false
        default: false
        type: boolean

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: ${{ !github.event.inputs.build_target || github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'wheels-only' }}
    strategy:
      matrix:
        # Build for multiple OS versions and architectures
        include:
          # Linux x86_64 and i686
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: i686
          # Linux ARM64 (aarch64)
          - os: ubuntu-latest
            arch: aarch64
          # Windows x86_64 and x86
          - os: windows-latest
            arch: AMD64
          - os: windows-latest
            arch: x86
          # macOS x86_64 and Apple Silicon (ARM64)
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      # Set up QEMU for ARM emulation on Linux
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.19.2

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # Build for Python 3.8, 3.9, 3.10, 3.11, 3.12, 3.13
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"

          # Skip 32-bit builds on Linux and macOS (keep Windows x86 for compatibility)
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_i686"

          # Set architecture-specific builds
          CIBW_ARCHS_LINUX: ${{ matrix.arch == 'aarch64' && 'aarch64' || matrix.arch == 'i686' && 'i686' || 'x86_64' }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.arch }}
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}

          # Test the wheels
          CIBW_TEST_COMMAND: 'python -c "import flexhash; print(''flexhash imported successfully''); result = flexhash.hash(b''test''); print(f''Hash result: {len(result)} bytes'')"'

          # Build settings
          CIBW_BUILD_VERBOSITY: 1

          # Repair wheels (embed dependencies)
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.build_target || github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'sdist-only' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build sdist
        run: python -m build --sdist

      - name: Test sdist
        run: |
          python -m pip install dist/*.tar.gz
          python -c "import flexhash; print('flexhash imported successfully from sdist')"

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    if: ${{ !github.event.inputs.skip_tests && (!github.event.inputs.build_target || github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'test-only') }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: >-
          ${{
            (github.event.inputs.python_versions == 'latest-only' && fromJSON('["3.13"]')) ||
            (github.event.inputs.python_versions == 'lts-only' && fromJSON('["3.8", "3.11"]')) ||
            (github.event.inputs.python_versions == 'minimal' && fromJSON('["3.11"]')) ||
            fromJSON('["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]')
          }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build and install package
        run: |
          python -m build
          python -m pip install dist/*.whl

      - name: Test package
        run: |
          python -c "
          import flexhash
          import sys
          print(f'Python {sys.version}')
          print('Testing flexhash...')

          # Basic functionality test
          test_data = b'Hello, FlexHash!'
          result = flexhash.hash(test_data)

          print(f'Input: {test_data}')
          print(f'Output: {result.hex()}')
          print(f'Output length: {len(result)} bytes')

          # Consistency test
          result2 = flexhash.hash(test_data)
          assert result == result2, 'Hash function is not deterministic'

          # Different input test
          result3 = flexhash.hash(b'Different input')
          assert result != result3, 'Different inputs produced same hash'

          print('âœ“ All tests passed!')
          "

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist, test]
    runs-on: ubuntu-latest
    # Only upload to PyPI on release
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
