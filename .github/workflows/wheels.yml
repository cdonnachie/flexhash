name: Build FlexHash

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      build_target:
        description: "Build target"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - wheels-only
          - test-only
          - sdist-only
      python_versions:
        description: "Python versions to test"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - latest-only
          - lts-only
          - minimal
      skip_tests:
        description: "Skip running tests"
        required: false
        default: false
        type: boolean

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: ${{ !github.event.inputs.build_target || github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'wheels-only' }}
    strategy:
      matrix:
        # Build for Linux, Windows, and macOS
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: windows-latest
            arch: AMD64
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.19.2

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # Build for Python 3.8, 3.9, 3.10, 3.11, 3.12, 3.13
          CIBW_BUILD: "cp3{8,9,10,11,12,13}-*"

          # Set architectures for each platform
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.arch }}
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}

          # Test the wheels with debugging
          #CIBW_BEFORE_TEST: 'pip show flexhash && python -c "import site; print(''Site packages:'', site.getsitepackages())"'
          #CIBW_TEST_COMMAND: 'python -c "import sys; print(''Python path:'', sys.path); import flexhash; print(''Import successful''); result = flexhash.hash(b''test''); print(''Hash successful'')"'

          # Build settings
          CIBW_BUILD_VERBOSITY: 1

          # Repair wheels (embed dependencies) for each platform
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          
          # Windows-specific settings for MSVC
          CIBW_ENVIRONMENT_WINDOWS: "CC=cl CXX=cl"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.build_target || github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'sdist-only' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build sdist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Only upload to PyPI on release
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
